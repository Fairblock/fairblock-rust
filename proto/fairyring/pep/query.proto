syntax = "proto3";

package fairyring.pep;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fairyring/pep/params.proto";
import "fairyring/pep/encrypted_tx.proto";
import "fairyring/pep/pep_nonce.proto";
import "fairyring/common/shared_types.proto";

option go_package = "github.com/Fairblock/fairyring/x/pep/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fairyring/pep/params";
  
  }
  
  // Queries a EncryptedTx by index.
  rpc EncryptedTx (QueryEncryptedTxRequest) returns (QueryEncryptedTxResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx/{target_height}/{index}";
  
  }
  
  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAll (QueryEncryptedTxAllRequest) returns (QueryEncryptedTxAllResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx";
  
  }
  
  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAllFromHeight (QueryEncryptedTxAllFromHeightRequest) returns (QueryEncryptedTxAllFromHeightResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx/{target_height}";
  
  }
  
  // Queries a list of LatestHeight items.
  rpc LatestHeight (QueryLatestHeightRequest) returns (QueryLatestHeightResponse) {
    option (google.api.http).get = "/fairyring/pep/latest_height";
  
  }
  
  // Queries a PepNonce by index.
  rpc PepNonce (QueryPepNonceRequest) returns (QueryPepNonceResponse) {
    option (google.api.http).get = "/fairyring/pep/pep_nonce/{address}";
  
  }
  
  // Queries a list of PepNonce items.
  rpc PepNonceAll (QueryPepNonceAllRequest) returns (QueryPepNonceAllResponse) {
    option (google.api.http).get = "/fairyring/pep/pep_nonce";
  
  }
  
  // Queries the public keys
  rpc PubKey (QueryPubKeyRequest) returns (QueryPubKeyResponse) {
    option (google.api.http).get = "/fairyring/pep/pub_key";
  
  }

  // Queries a Keyshare request by identity
  rpc KeyshareReq (QueryKeyshareReqRequest) returns (QueryKeyshareReqResponse) {
    option (google.api.http).get = "/fairyring/pep/keyshare/{req_id}";
  
  }

  // queries a list of keyshare requests
  rpc KeyshareReqAll (QueryKeyshareReqAllRequest) returns (QueryKeyshareReqAllResponse) {
    option (google.api.http).get = "/fairyring/pep/keyshare";
  
  }
  
  // Queries a list of ShowPrivateKeyshareReq items.
  rpc PrivateKeyshareReq (QueryPrivateKeyshareReqRequest) returns (QueryPrivateKeyshareReqResponse) {
    option (google.api.http).get = "/Fairblock/fairyring/pep/show_private_keyshare_req/{req_id}";
  
  }
  
  // Queries a list of DecryptData items.
  rpc DecryptData (QueryDecryptDataRequest) returns (QueryDecryptDataResponse) {
    option (google.api.http).get = "/Fairblock/fairyring/pep/decrypt_data/{pubkey}/{aggr_keyshare}/{encrypted_data}";
  
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryKeyshareReqRequest is request type for the Query/KeyshareReq RPC method.
message QueryKeyshareReqRequest {
  string req_id = 1;
}

// QueryKeyshareReqResponse is response type for the Query/KeyshareReq RPC method.
message QueryKeyshareReqResponse {
  IdentityExecutionQueue keyshare = 1;
}

// QueryKeyshareReqAllRequest is request type for the Query/KeyshareReqAll RPC method.
message QueryKeyshareReqAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryKeyshareReqAllResponse is response type for the Query/KeyshareReqAll RPC method.
message QueryKeyshareReqAllResponse {
  repeated IdentityExecutionQueue                 keyshares  = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryEncryptedTxRequest is request type for the Query/EncryptedTx RPC method.
message QueryEncryptedTxRequest {
  uint64 target_height = 1;
  uint64 index        = 2;
}

// QueryEncryptedTxResponse is response type for the Query/EncryptedTx RPC method.
message QueryEncryptedTxResponse {
  EncryptedTx encrypted_tx = 1 [(gogoproto.nullable) = false];
}

// QueryEncryptedTxAllRequest is request type for the Query/EncryptedTxAll RPC method.
message QueryEncryptedTxAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryEncryptedTxAllResponse is response type for the Query/EncryptedTxAll RPC method.
message QueryEncryptedTxAllResponse {
  repeated EncryptedTxArray encrypted_tx_array = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryEncryptedTxAllFromHeightRequest is request type for the Query/EncryptedTxAllFromHeight RPC method.
message QueryEncryptedTxAllFromHeightRequest {
  uint64 target_height = 1;
}

// QueryEncryptedTxAllFromHeightResponse is response type for the Query/EncryptedTxAllFromHeight RPC method.
message QueryEncryptedTxAllFromHeightResponse {
  EncryptedTxArray encrypted_tx_array = 1 [(gogoproto.nullable) = false];
}

// QueryLatestHeightRequest is request type for the Query/LatestHeight RPC method.
message QueryLatestHeightRequest {}

// QueryLatestHeightResponse is response type for the Query/LatestHeight RPC method.
message QueryLatestHeightResponse {
  uint64 height = 1;
}

// QueryPepNonceRequest is request type for the Query/PepNonce RPC method.
message QueryPepNonceRequest {
  string address = 1;
}

// QueryPepNonceResponse is response type for the Query/PepNonce RPC method.
message QueryPepNonceResponse {
  PepNonce pep_nonce = 1 [(gogoproto.nullable) = false];
}

// QueryPepNonceAllRequest is request type for the Query/PepNonceAll RPC method.
message QueryPepNonceAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPepNonceAllResponse is response type for the Query/PepNonceAll RPC method.
message QueryPepNonceAllResponse {
  repeated PepNonce pep_nonce = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPubKeyRequest is request type for the Query/PubKey RPC method.
message QueryPubKeyRequest {}

// QueryPubKeyResponse is response type for the Query/PubKey RPC method.
message QueryPubKeyResponse {
  fairyring.common.ActivePublicKey active_pub_key = 1 [(gogoproto.nullable) = false];
  fairyring.common.QueuedPublicKey queued_pub_key = 2 [(gogoproto.nullable) = false];
}

// QueryPrivateKeyshareReqRequest is request type for the Query/PrivateKeyshareReq RPC method.
message QueryPrivateKeyshareReqRequest {
  string req_id = 1;
}

// QueryPrivateKeyshareReqResponse is response type for the Query/PrivateKeyshareReq RPC method.
message QueryPrivateKeyshareReqResponse {
  string creator = 1;
  string req_id = 2;
  string pubkey = 3;
  repeated fairyring.common.EncryptedKeyshare encrypted_keyshares = 5;
}

// QueryDecryptDataRequest is request type for the Query/DecryptData RPC method.
message QueryDecryptDataRequest {
  string pubkey = 1;
  string aggr_keyshare  = 2;
  string encrypted_data = 3;
}

// QueryDecryptDataResponse is response type for the Query/DecryptData RPC method.
message QueryDecryptDataResponse {
  string decrypted_data = 1;
}
